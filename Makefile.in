# Description: rules to build NFS server
#
# Links:
#  * https://github.com/kofemann/simple-nfs
#  * https://github.com/kofemann/vfs4j/tree/master/src/main/java/org/dcache/vfs4j
#  * https://mvnrepository.com/search?q=
#  * https://search.maven.org/search
#  site-plugin -- creates html-documentation with dependencies etc.

HELP_MAKEFILE_LIST:=$(lastword ${MAKEFILE_LIST})

BRANCH_TYPE=
BRANCH=
VERSION=1.0

MAVEN_ENV=JAVA_HOME=/usr/lib/jvm/java-8-oracle/
MAVEN=mvn
MAVEN_OPTS=
MAVEN_OPTS+=-DskipTests
MAVEN_OPTS+=-Djarsigner.skip=true
MAVEN_OPTS+=-e
MAVEN_OPTS+=-Dmaven.repo.local=/home/vlad/.m2/repository

DEFAULT_INSTALL_PATH?=/opt/otc-manager/

# Enables bind() hook: moves privileged port numbers to numbers from 60000
WITH_BIND_HOOK=
#WITH_BIND_HOOK=yes

# Enables tracing of system calls
WITH_STRACE=
#WITH_STRACE=yes


all: help


## Builds libraries
OVERRIDE_BUILD_TARGET=yes
build::
	# Link: https://wiki.openthinclient.org/display/DOS/Entwicklungsprozess
	#${MAVEN_ENV} ${MAVEN} ${MAVEN_OPTS} org.codehaus.mojo:versions-maven-plugin:2.5:set -DprocessAllModules=true -DnewVersion=2.3.7-SNAPSHOT
	
	-cd runtime/standalone/target/ && rm *.tar.gz *.zip *.jar
	
#	${MAVEN_ENV} ${MAVEN} ${MAVEN_OPTS} clean package
	${MAVEN_ENV} ${MAVEN} ${MAVEN_OPTS} package


## Runs application
start::
	@echo "\n========================================" && echo "Target \`$@\`:\n"
	
	@# Creates local shared directory
	mkdir -p share
	
	@# Builds and launches
	@# Link: http://www.mojohaus.org/exec-maven-plugin/usage.html
	\
		$(if ${WITH_BIND_HOOK},LD_PRELOAD=${PWD}/bind_hook.so,sudo) \
		${MAVEN_ENV} \
		$(if ${WITH_STRACE},strace -f) \
		${MAVEN} \
		${MAVEN_OPTS} package exec:java  # -Dexec.mainClass="NFSServerMain"  # [-Dexec.args="argument1"] ...
	
	@echo "Done."


OVERRIDE_CHECK_TARGET=yes
check:: | .parse-dst-argument
	@echo "\n========================================" && echo "Target \`$@\`:\n"
	
	@# Checks if service is running
#	watch -d "netstat -tulpn"
#	watch -n 1 "netstat -tulpn | grep ':6[01]'"
#	mount -t nfs -o hard localhost:/share share
#	sudo mount -t nfs $(if ${WITH_BIND_HOOK},-o port=60111) localhost:/share remote_share
#	@sudo apt install nfs-common
#	sudo mount -t nfs $(if ${WITH_BIND_HOOK},-o port=60111) 10.224.129.186:/share remote_share
	$(if $(filter localhost,${HOST}),sudo netstat -tulpn | grep '/java')
	
	mkdir -p remote_share
	
	sleep 0.2
	
	@echo Umounting previously mounted share...
	-sudo umount -f remote_share
	
	sleep 0.2
	
	@echo Mounting share...
	@echo
#	sudo mount -v -t nfs $(if ${WITH_BIND_HOOK},-o port=60111) ${HOST}:${BASE_PATH} remote_share
	sudo mount -v -t nfs -o nolock $(if ${WITH_BIND_HOOK},-o port=60111) ${HOST}:${BASE_PATH} remote_share
#	sudo mount -v -t nfs -o nfsvers=2,nolock $(if ${WITH_BIND_HOOK},-o port=60111) ${HOST}:${BASE_PATH} remote_share
#	sudo mount -v -t nfs -o nfsvers=2,proto=udp,nolock $(if ${WITH_BIND_HOOK},-o port=60111) ${HOST}:${BASE_PATH} remote_share
	
	sleep 0.2
	
	@echo
	@echo Mounted NFS directories:
	mount | grep nfs
	
	@echo Mounted NFS clients:
	sudo netstat | grep :nfs
	
	@echo
	@echo Listing:
	sudo ls -la remote_share
	
	sleep 0.2
	
	@echo
	@echo Unmounting share...
	sudo umount -l remote_share
	
	rm -rf remote_share
	
	@echo "Done."


## Replaces data on the server.
##
## Usage:
##     make install-java DST=[user:[password]@]host[:path]
##
## Customizable environment variables:
##     DST -- required, format: [user:[password]@]host[:path]
##     LOGIN -- default: ${DEFAULT_INSTALL_LOGIN}
##     PASSWORD -- default: use appropriate certificate or ask for a password
##     BASE_PATH -- default: ${DEFAULT_INSTALL_PATH}
##
## Use it for testing purpose to avoid a full reinstall of the package.
OVERRIDE_INSTALL_TARGET=yes
install:: \
		| .build .parse-dst-argument
	@echo "\n========================================" && echo "Target \`$@\`:\n"
	
	cd .build && rm -f *.tar.gz *.zip *.jar
	cp -al \
		runtime/standalone/target/*.tar.gz \
		runtime/standalone/target/*.zip \
		runtime/standalone/target/*.jar \
		.build/
	sync
	
	# Extracts zip-data into lib/
	cd .build && test -e *.zip && rm -rf lib && unzip *.zip
	
	@# Uploads files to HOST and installs them into BASE_PATH 
	$(eval INSTALL_SRC=lib)
	( \
		cd .build \
		&& ( \
			tar czf - ${INSTALL_SRC} \
			| $(if $(or ${PASSWORD},${DEFAULT_INSTALL_PASSWORD}),sshpass -p $(or ${PASSWORD},${DEFAULT_INSTALL_PASSWORD}) )ssh -oStrictHostKeyChecking=no $(or ${LOGIN},${DEFAULT_INSTALL_LOGIN})@${HOST} \( \
				true \
				\&\& sudo /etc/init.d/openthinclient-manager stop \
				\&\& sudo mkdir -p $(or ${BASE_PATH},${DEFAULT_INSTALL_PATH})/ \
				\&\& cd $(or ${BASE_PATH},${DEFAULT_INSTALL_PATH})/ \
				\&\& sudo tar xvzf - --overwrite \
				\&\& sudo /etc/init.d/openthinclient-manager start \
			\) 1>&- \
		) \
	)
	@# twine upload --repository-url http://localhost:8080/ ./.build/rdesktop-2018.1-py2-none-any.whl
	
	@echo "Done."


## Removes temporary data.
OVERRIDE_CLEAN_TARGET=yes
clean::
	${MAVEN_ENV} ${MAVEN} ${MAVEN_OPTS} clean
