/*******************************************************************************
 * openthinclient.org ThinClient suite
 * 
 * Copyright (C) 2004, 2007 levigo holding GmbH. All Rights Reserved.
 * 
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place - Suite 330, Boston, MA 02111-1307, USA.
 *******************************************************************************/
/*
 * Automatically generated by jrpcgen 1.0.5 on 29.04.05 21:09 jrpcgen is part of
 * the "Remote Tea" ONC/RPC package for Java See
 * http://remotetea.sourceforge.net for details
 */
package org.openthinclient.nfsd.tea;

import java.io.IOException;
import java.net.InetAddress;

import org.acplt.oncrpc.OncRpcClient;
import org.acplt.oncrpc.OncRpcClientStub;
import org.acplt.oncrpc.OncRpcException;
import org.acplt.oncrpc.XdrInt;
import org.acplt.oncrpc.XdrVoid;

/**
 * The class <code>nfs_protClient</code> implements the client stub proxy for
 * the NFS_PROGRAM remote program. It provides method stubs which, when called,
 * in turn call the appropriate remote method (procedure).
 */
public class nfs_protClient extends OncRpcClientStub {

  /**
   * Constructs a <code>nfs_protClient</code> client stub proxy object from
   * which the NFS_PROGRAM remote program can be accessed.
   * 
   * @param host Internet address of host where to contact the remote program.
   * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
   *          used for ONC/RPC calls.
   * @throws OncRpcException if an ONC/RPC error occurs.
   * @throws IOException if an I/O error occurs.
   */
  public nfs_protClient(InetAddress host, int protocol) throws OncRpcException,
      IOException {
    super(host, nfs_prot.NFS_PROGRAM, 2, 0, protocol);
  }

  /**
   * Constructs a <code>nfs_protClient</code> client stub proxy object from
   * which the NFS_PROGRAM remote program can be accessed.
   * 
   * @param host Internet address of host where to contact the remote program.
   * @param port Port number at host where the remote program can be reached.
   * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
   *          used for ONC/RPC calls.
   * @throws OncRpcException if an ONC/RPC error occurs.
   * @throws IOException if an I/O error occurs.
   */
  public nfs_protClient(InetAddress host, int port, int protocol)
      throws OncRpcException, IOException {
    super(host, nfs_prot.NFS_PROGRAM, 2, port, protocol);
  }

  /**
   * Constructs a <code>nfs_protClient</code> client stub proxy object from
   * which the NFS_PROGRAM remote program can be accessed.
   * 
   * @param client ONC/RPC client connection object implementing a particular
   *          protocol.
   * @throws OncRpcException if an ONC/RPC error occurs.
   * @throws IOException if an I/O error occurs.
   */
  public nfs_protClient(OncRpcClient client) throws OncRpcException,
      IOException {
    super(client);
  }

  /**
   * Constructs a <code>nfs_protClient</code> client stub proxy object from
   * which the NFS_PROGRAM remote program can be accessed.
   * 
   * @param host Internet address of host where to contact the remote program.
   * @param program Remote program number.
   * @param version Remote program version number.
   * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
   *          used for ONC/RPC calls.
   * @throws OncRpcException if an ONC/RPC error occurs.
   * @throws IOException if an I/O error occurs.
   */
  public nfs_protClient(InetAddress host, int program, int version, int protocol)
      throws OncRpcException, IOException {
    super(host, program, version, 0, protocol);
  }

  /**
   * Constructs a <code>nfs_protClient</code> client stub proxy object from
   * which the NFS_PROGRAM remote program can be accessed.
   * 
   * @param host Internet address of host where to contact the remote program.
   * @param program Remote program number.
   * @param version Remote program version number.
   * @param port Port number at host where the remote program can be reached.
   * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
   *          used for ONC/RPC calls.
   * @throws OncRpcException if an ONC/RPC error occurs.
   * @throws IOException if an I/O error occurs.
   */
  public nfs_protClient(InetAddress host, int program, int version, int port,
      int protocol) throws OncRpcException, IOException {
    super(host, program, version, port, protocol);
  }

  /**
   * Call remote procedure NFSPROC_NULL_2.
   * 
   * @throws OncRpcException if an ONC/RPC error occurs.
   */
  public void NFSPROC_NULL_2() throws OncRpcException {
    XdrVoid args$ = XdrVoid.XDR_VOID;
    XdrVoid result$ = XdrVoid.XDR_VOID;
    client.call(nfs_prot.NFSPROC_NULL_2, nfs_prot.NFS_VERSION, args$, result$);
  }

  /**
   * Call remote procedure NFSPROC_GETATTR_2.
   * 
   * @param arg1 parameter (of type nfs_fh) to the remote procedure call.
   * @return Result from remote procedure call (of type attrstat).
   * @throws OncRpcException if an ONC/RPC error occurs.
   */
  public attrstat NFSPROC_GETATTR_2(nfs_fh arg1) throws OncRpcException {
    attrstat result$ = new attrstat();
    client
        .call(nfs_prot.NFSPROC_GETATTR_2, nfs_prot.NFS_VERSION, arg1, result$);
    return result$;
  }

  /**
   * Call remote procedure NFSPROC_SETATTR_2.
   * 
   * @param arg1 parameter (of type sattrargs) to the remote procedure call.
   * @return Result from remote procedure call (of type attrstat).
   * @throws OncRpcException if an ONC/RPC error occurs.
   */
  public attrstat NFSPROC_SETATTR_2(sattrargs arg1) throws OncRpcException {
    attrstat result$ = new attrstat();
    client
        .call(nfs_prot.NFSPROC_SETATTR_2, nfs_prot.NFS_VERSION, arg1, result$);
    return result$;
  }

  /**
   * Call remote procedure NFSPROC_ROOT_2.
   * 
   * @throws OncRpcException if an ONC/RPC error occurs.
   */
  public void NFSPROC_ROOT_2() throws OncRpcException {
    XdrVoid args$ = XdrVoid.XDR_VOID;
    XdrVoid result$ = XdrVoid.XDR_VOID;
    client.call(nfs_prot.NFSPROC_ROOT_2, nfs_prot.NFS_VERSION, args$, result$);
  }

  /**
   * Call remote procedure NFSPROC_LOOKUP_2.
   * 
   * @param arg1 parameter (of type diropargs) to the remote procedure call.
   * @return Result from remote procedure call (of type diropres).
   * @throws OncRpcException if an ONC/RPC error occurs.
   */
  public diropres NFSPROC_LOOKUP_2(diropargs arg1) throws OncRpcException {
    diropres result$ = new diropres();
    client.call(nfs_prot.NFSPROC_LOOKUP_2, nfs_prot.NFS_VERSION, arg1, result$);
    return result$;
  }

  /**
   * Call remote procedure NFSPROC_READLINK_2.
   * 
   * @param arg1 parameter (of type nfs_fh) to the remote procedure call.
   * @return Result from remote procedure call (of type readlinkres).
   * @throws OncRpcException if an ONC/RPC error occurs.
   */
  public readlinkres NFSPROC_READLINK_2(nfs_fh arg1) throws OncRpcException {
    readlinkres result$ = new readlinkres();
    client.call(nfs_prot.NFSPROC_READLINK_2, nfs_prot.NFS_VERSION, arg1,
        result$);
    return result$;
  }

  /**
   * Call remote procedure NFSPROC_READ_2.
   * 
   * @param arg1 parameter (of type readargs) to the remote procedure call.
   * @return Result from remote procedure call (of type readres).
   * @throws OncRpcException if an ONC/RPC error occurs.
   */
  public readres NFSPROC_READ_2(readargs arg1) throws OncRpcException {
    readres result$ = new readres();
    client.call(nfs_prot.NFSPROC_READ_2, nfs_prot.NFS_VERSION, arg1, result$);
    return result$;
  }

  /**
   * Call remote procedure NFSPROC_WRITECACHE_2.
   * 
   * @throws OncRpcException if an ONC/RPC error occurs.
   */
  public void NFSPROC_WRITECACHE_2() throws OncRpcException {
    XdrVoid args$ = XdrVoid.XDR_VOID;
    XdrVoid result$ = XdrVoid.XDR_VOID;
    client.call(nfs_prot.NFSPROC_WRITECACHE_2, nfs_prot.NFS_VERSION, args$,
        result$);
  }

  /**
   * Call remote procedure NFSPROC_WRITE_2.
   * 
   * @param arg1 parameter (of type writeargs) to the remote procedure call.
   * @return Result from remote procedure call (of type attrstat).
   * @throws OncRpcException if an ONC/RPC error occurs.
   */
  public attrstat NFSPROC_WRITE_2(writeargs arg1) throws OncRpcException {
    attrstat result$ = new attrstat();
    client.call(nfs_prot.NFSPROC_WRITE_2, nfs_prot.NFS_VERSION, arg1, result$);
    return result$;
  }

  /**
   * Call remote procedure NFSPROC_CREATE_2.
   * 
   * @param arg1 parameter (of type createargs) to the remote procedure call.
   * @return Result from remote procedure call (of type diropres).
   * @throws OncRpcException if an ONC/RPC error occurs.
   */
  public diropres NFSPROC_CREATE_2(createargs arg1) throws OncRpcException {
    diropres result$ = new diropres();
    client.call(nfs_prot.NFSPROC_CREATE_2, nfs_prot.NFS_VERSION, arg1, result$);
    return result$;
  }

  /**
   * Call remote procedure NFSPROC_REMOVE_2.
   * 
   * @param arg1 parameter (of type diropargs) to the remote procedure call.
   * @return Result from remote procedure call (of type nfsstat).
   * @throws OncRpcException if an ONC/RPC error occurs.
   */
  public int NFSPROC_REMOVE_2(diropargs arg1) throws OncRpcException {
    XdrInt result$ = new XdrInt();
    client.call(nfs_prot.NFSPROC_REMOVE_2, nfs_prot.NFS_VERSION, arg1, result$);
    return result$.intValue();
  }

  /**
   * Call remote procedure NFSPROC_RENAME_2.
   * 
   * @param arg1 parameter (of type renameargs) to the remote procedure call.
   * @return Result from remote procedure call (of type nfsstat).
   * @throws OncRpcException if an ONC/RPC error occurs.
   */
  public int NFSPROC_RENAME_2(renameargs arg1) throws OncRpcException {
    XdrInt result$ = new XdrInt();
    client.call(nfs_prot.NFSPROC_RENAME_2, nfs_prot.NFS_VERSION, arg1, result$);
    return result$.intValue();
  }

  /**
   * Call remote procedure NFSPROC_LINK_2.
   * 
   * @param arg1 parameter (of type linkargs) to the remote procedure call.
   * @return Result from remote procedure call (of type nfsstat).
   * @throws OncRpcException if an ONC/RPC error occurs.) throws OncRpcException {
    XdrInt result$ = new XdrInt();
    clientt.NFSPROC_LINK_2, nfs_prot.NFS_VERSION, arg1, result$);
    return result$.intValue();
  }

  /**
   * Call remote procedure NFSPROC_SYMLINK_2.
   * 
   * @param arg1 parameter (of type symlinkargs) to the remote procedure call.
   * @return Result from remote procedure call (of type nfsstat).
   * @throws OncRpcException if an ONC/RPC error occurs.
   */
  public int NFSPROC_SYMLINK_2(symlinkargs arg1) throws OncRpcException {
    XdrInt result$ = new XdrInt();
    client
        .call(nfs_prot.NFSPROC_SYMLINK_2, nfs_prot.NFS_VERSION, arg1, result$);
    return result$.intValue();
  }

  /**
   * Call remote procedure NFSPROC_MKDIR_2.
   * 
   * @param arg1 parameter (of type createargs) to the remote procedure call.
   * @return Result from remote procedure call (of type diropres).
   * @throws OncRpcException if an ONC/RPC error occurs.
   */
  public diropres NFSPROC_MKDIR_2(createargs arg1) throws OncRpcException {
    diropres result$ = new diropres();
    client.call(nfs_prot.NFSPROC_MKDIR_2, nfs_prot.NFS_VERSION, arg1, result$);
    return result$;
  }

  /**
   * Call remote procedure NFSPROC_RMDIR_2.
   * 
   * @param arg1 parameter (of type diropargs) to the remote procedure call.
   * @return Result from remote procedure call (of type nfsstat).
   * @throws OncRpcException if an ONC/RPC error occurs.
   */
  public int NFSPROC_RMDIR_2(diropargs arg1) throws OncRpcException {
    XdrInt result$ = new XdrInt();
    client.call(nfs_prot.NFSPROC_RMDIR_2, nfs_prot.NFS_VERSION, arg1, result$);
    return result$.intValue();
  }

  /**
   * Call remote procedure NFSPROC_READDIR_2.
   * 
   * @param arg1 parameter (of type readdirargs) to the remote procedure call.
   * @return Result from remote procedure call (of type readdirres).
   * @throws OncRpcException if an ONC/RPC error occurs.
   */
  public readdirres NFSPROC_READDIR_2(readdirargs arg1) throws OncRpcException {
    readdirres result$ = new readdirres();
    client
        .call(nfs_prot.NFSPROC_READDIR_2, nfs_prot.NFS_VERSION, arg1, result$);
    return result$;
  }

  /**
   * Call remote procedure NFSPROC_STATFS_2.
   * 
   * @param arg1 parameter (of type nfs_fh) to the remote procedure call.
   * @return Result from remote procedure call (of type statfsres).
   * @throws OncRpcException if an ONC/RPC error occurs.
   */
  public statfsres NFSPROC_STATFS_2(nfs_fh arg1) throws OncRpcException {
    statfsres result$ = new statfsres();
    client.call(nfs_prot.NFSPROC_STATFS_2, nfs_prot.NFS_VERSION, arg1, result$);
    return result$;
  }

}
// End of nfs_protClient.java
