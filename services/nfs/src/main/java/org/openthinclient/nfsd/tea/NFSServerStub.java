/*******************************************************************************
 * openthinclient.org ThinClient suite
 * 
 * Copyright (C) 2004, 2007 levigo holding GmbH. All Rights Reserved.
 * 
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place - Suite 330, Boston, MA 02111-1307, USA.
 *******************************************************************************/
/*
 * Automatically generated by jrpcgen 1.0.5 on 29.04.05 21:09 jrpcgen is part of
 * the "Remote Tea" ONC/RPC package for Java See
 * http://remotetea.sourceforge.net for details
 */
package org.openthinclient.nfsd.tea;

import java.io.IOException;
import java.net.InetAddress;

import org.acplt.oncrpc.OncRpcException;
import org.acplt.oncrpc.XdrInt;
import org.acplt.oncrpc.XdrVoid;
import org.acplt.oncrpc.server.OncRpcCallInformation;
import org.acplt.oncrpc.server.OncRpcDispatchable;
import org.acplt.oncrpc.server.OncRpcServerStub;
import org.acplt.oncrpc.server.OncRpcServerTransport;
import org.acplt.oncrpc.server.OncRpcServerTransportRegistrationInfo;
import org.acplt.oncrpc.server.OncRpcTcpServerTransport;
import org.acplt.oncrpc.server.OncRpcUdpServerTransport;

/**
 */
public abstract class NFSServerStub extends OncRpcServerStub
    implements
      OncRpcDispatchable {

  private static final int NFS_DEFAULT_PORT = 2069;

  public NFSServerStub() throws OncRpcException, IOException {
    this(0, 0);
  }

  public NFSServerStub(int port, int programNumber) throws OncRpcException,
      IOException {
    this(null, port, programNumber);
  }

  public NFSServerStub(InetAddress bindAddr, int port, int programNumber)
      throws OncRpcException, IOException {
    info = new OncRpcServerTransportRegistrationInfo[]{new OncRpcServerTransportRegistrationInfo(
        programNumber != 0 ? programNumber : nfs_prot.NFS_PROGRAM, 2),};
    transports = new OncRpcServerTransport[]{
        // new OncRpcNIOUdpServerTransport(this, bindAddr, port, info, 32768),
        new OncRpcUdpServerTransport(this, bindAddr, port != 0
            ? port
            : NFS_DEFAULT_PORT, info, 32768),
        new OncRpcTcpServerTransport(this, bindAddr, port != 0
            ? port
            : NFS_DEFAULT_PORT, info, 32768)};
  }

  public void dispatchOncRpcCall(OncRpcCallInformation call, int program,
      int version, int procedure) throws OncRpcException, IOException {
    if (version == 2) {
      try {
        switch (procedure){
          case 0 : {
            call.retrieveCall(XdrVoid.XDR_VOID);
            NFSPROC_NULL_2();
            call.reply(XdrVoid.XDR_VOID);
            break;
          }
          case 1 : {
            nfs_fh args$ = new nfs_fh();
            call.retrieveCall(args$);
            attrstat result$ = NFSPROC_GETATTR_2(args$);
            call.reply(result$);
            break;
          }
          case 2 : {
            sattrargs args$ = new sattrargs();
            call.retrieveCall(args$);
            attrstat result$ = NFSPROC_SETATTR_2(args$);
            call.reply(result$);
            break;
          }
          case 3 : {
            call.retrieveCall(XdrVoid.XDR_VOID);
            NFSPROC_ROOT_2();
            call.reply(XdrVoid.XDR_VOID);
            break;
          }
          case 4 : {
            diropargs args$ = new diropargs();
            call.retrieveCall(args$);
            diropres result$ = NFSPROC_LOOKUP_2(args$);
            call.reply(result$);
            break;
          }
          case 5 : {
            nfs_fh args$ = new nfs_fh();
            call.retrieveCall(args$);
            readlinkres result$ = NFSPROC_READLINK_2(args$);
            call.reply(result$);
            break;
          }
          case 6 : {
            readargs args$ = new readargs();
            call.retrieveCall(args$);
            readres result$ = NFSPROC_READ_2(args$);
            call.reply(result$);
            break;
          }
          case 7 : {
            call.retrieveCall(XdrVoid.XDR_VOID);
            NFSPROC_WRITECACHE_2();
            call.reply(XdrVoid.XDR_VOID);
            break;
          }
          case 8 : {
            writeargs args$ = new writeargs();
            call.retrieveCall(args$);
            attrstat result$ = NFSPROC_WRITE_2(args$);
            call.reply(result$);
            break;
          }
          case 9 : {
            createargs args$ = new createargs();
            call.retrieveCall(args$);
            diropres result$ = NFSPROC_CREATE_2(args$);
            call.reply(result$);
            break;
          }
          case 10 : {
            diropargs args$ = new diropargs();
            call.retrieveCall(args$);
            XdrInt result$ = new XdrInt(NFSPROC_REMOVE_2(args$));
            call.reply(result$);
            break;
          }
          case 11 : {
            renameargs args$ = new renameargs();
            call.retrieveCall(args$);
            XdrInt result$ = new XdrInt(NFSPROC_RENAME_2(args$));
            call.reply(result$);
            break;
          }
          case 12 : {
            linkargs args$ = new linkargs();
            call.retrieveCall(args$);
            XdrInt result$ = new XdrInt(NFSPROC_LINK_2(args$));
            call.reply(result$);
            break;
          }
          case 13 : {
            symlinkargs args$ = new symlinkargs();
            call.retrieveCall(args$);
            XdrInt result$ = new XdrInt(NFSPROC_SYMLINK_2(args$));
            call.reply(result$);
            break;
          }
          case 14 : {
            createargs args$ = new createargs();
            call.retrieveCall(args$);
            diropres result$ = NFSPROC_MKDIR_2(args$);
            call.reply(result$);
            break;
          }
          case 15 : {
            diropargs args$ = new diropargs();
            call.retrieveCall(args$);
            XdrInt result$ = new XdrInt(NFSPROC_RMDIR_2(args$));
            call.reply(result$);
            break;
          }
          case 16 : {
            readdirargs args$ = new readdirargs();
            call.retrieveCall(args$);
            readdirres result$ = NFSPROC_READDIR_2(args$);
            call.reply(result$);
            break;
          }
          case 17 : {
            nfs_fh args$ = new nfs_fh();
            call.retrieveCall(args$);
            statfsres result$ = NFSPROC_STATFS_2(args$);
            call.reply(result$);
            break;
          }
          default :
            call.failProcedureUnavailable();
        }
      } catch (Throwable t) {
        System.err.println("Uncaught Throwable");
        t.printStackTrace();
      }
    } else {
      call.failProcedureUnavailable();
    }
  }

  protected abstract void NFSPROC_NULL_2();

  protected abstract attrstat NFSPROC_GETATTR_2(nfs_fh arg1);

  protected abstract attrstat NFSPROC_SETATTR_2(sattrargs arg1);

  protected abstract void NFSPROC_ROOT_2();

  protected abstract diropres NFSPROC_LOOKUP_2(diropargs arg1);

  protected abstract readlinkres NFSPROC_READLINK_2(nfs_fh arg1);

  protected abstract readres NFSPROC_READ_2(readargs arg1);

  protected abstract void NFSPROC_WRITECACHE_2();

  protected abstract attrstat NFSPROC_WRITE_2(writeargs arg1);

  protected abstract diropres NFSPROC_CREATE_2(createargs arg1);

  protected abstract int NFSPROC_REMOVE_2(diropargs arg1);

  protected abstract int NFSPROC_RENAME_2(renameargs arg1);

  protected abstract int NFSPROC_LINK_2(linkargs arg1);

  protected abstract int NFSPROC_SYMLINK_2(symlinkargs arg1);

  protected abstract diropres NFSPROC_MKDIR_2(createargs arg1);

  protected abstract int NFSPROC_RMDIR_2(diropargs arg1);

  protected abstract readdirres NFSPROC_READDIR_2(readdirargs arg1);

  protected abstract statfsres NFSPROC_STATFS_2(nfs_fh arg1);

}
// End of NFSServerStub.java
